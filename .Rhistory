theme_bw() + ylab("Evidence") + xlab("Time (ms)")
ggsave(ts.graph,
filename = paste0("results/sample_path/path-plot-corr",
unique(.$graph), "-", Sys.Date(),
".pdf"))
})
calc_model_paths(paths, cores = cores) %>% melt %>%
rename(state = value, condition = L2, model = L1) %>%
mutate(graph = cut(x = condition, labels = FALSE,
breaks = max(condition) / nplots)) %>%
group_by(condition, model) %>%
mutate(time = seq(from = 1, by = 1, length.out = n()),
bound = ind_param$alpha[unique(condition)]) %>%
group_by(graph) %>%
do({
alpha <- select(., bound) %>% unique
ts.graph <- ggplot(data = .) +
aes(x = time, y = state, group = interaction(condition, model),
color = model) +
facet_wrap(facets = ~condition, nrow = nrow, ncol = ncol,
scales = "free_x") +
geom_line() + geom_hline(yintercept = c(0, alpha)) +
theme_bw() + ylab("Evidence") + xlab("Time (ms)")
ggsave(ts.graph,
filename = paste0("results/sample_path/path-plot-corr",
unique(.$graph), "-", Sys.Date(),
".pdf"))
})
nrow
ncol
calc_model_paths(paths, cores = cores) %>% melt %>%
rename(state = value, condition = L2, model = L1) %>%
mutate(graph = cut(x = condition, labels = FALSE,
breaks = max(condition) / nplots)) %>%
group_by(condition, model) %>%
mutate(time = seq(from = 1, by = 1, length.out = n()),
bound = ind_param$alpha[unique(condition)]) %>%
group_by(graph) %>%
do({
alpha <- select(., bound) %>% unique
ts.graph <- ggplot(data = .) +
aes(x = time, y = state, group = interaction(condition, model),
color = model) +
facet_wrap(facets = ~condition, nrow = 6, ncol = 4,
scales = "free_x") +
geom_line() + geom_hline(yintercept = c(0, alpha)) +
theme_bw() + ylab("Evidence") + xlab("Time (ms)")
ggsave(ts.graph,
filename = paste0("results/sample_path/path-plot-corr",
unique(.$graph), "-", Sys.Date(),
".pdf"))
})
calc_model_paths(paths, cores = cores) %>% melt %>%
rename(state = value, condition = L2, model = L1) %>%
mutate(graph = cut(x = condition, labels = FALSE,
breaks = max(condition) / nplots)) %>%
group_by(condition, model) %>%
mutate(time = seq(from = 1, by = 1, length.out = n()),
bound = ind_param$alpha[unique(condition)]) %>%
group_by(graph) %>% select(., bound) %>% unique
calc_model_paths(paths, cores = cores) %>% melt %>%
rename(state = value, condition = L2, model = L1) %>%
mutate(graph = cut(x = condition, labels = FALSE,
breaks = max(condition) / nplots)) %>%
group_by(condition, model) %>%
mutate(time = seq(from = 1, by = 1, length.out = n()),
bound = ind_param$alpha[unique(condition)]) %>%
group_by(graph) %>% select(., bound) %>% unique %>% select(bound)
calc_model_paths(paths, cores = cores) %>% melt %>%
rename(state = value, condition = L2, model = L1) %>%
mutate(graph = cut(x = condition, labels = FALSE,
breaks = max(condition) / nplots)) %>%
group_by(condition, model) %>%
mutate(time = seq(from = 1, by = 1, length.out = n()),
bound = ind_param$alpha[unique(condition)]) %>%
group_by(graph) %>% select(., bound) %>% unique %>% select(graph)
?select
calc_model_paths(paths, cores = cores) %>% melt %>%
rename(state = value, condition = L2, model = L1) %>%
mutate(graph = cut(x = condition, labels = FALSE,
breaks = max(condition) / nplots)) %>%
group_by(condition, model) %>%
mutate(time = seq(from = 1, by = 1, length.out = n()),
bound = ind_param$alpha[unique(condition)]) %>%
group_by(graph) %>% select(., bound) %>% unique %>% select(-graph)
ind_param <- combine_param(nu = nu, wiener = wiener,
rho = rho, omega = omega)
calc_model_paths(paths, cores = cores) %>% melt %>%
rename(state = value, condition = L2, model = L1) %>%
mutate(graph = cut(x = condition, labels = FALSE,
breaks = max(condition) / nplots)) %>%
group_by(condition, model) %>%
mutate(time = seq(from = 1, by = 1, length.out = n()),
bound = ind_param$alpha[unique(condition)]) %>%
group_by(graph) %>%
do({
alpha <- select(., bound) %>% unique; print(alpha) })
calc_model_paths(paths, cores = cores) %>% melt %>%
rename(state = value, condition = L2, model = L1) %>%
mutate(graph = cut(x = condition, labels = FALSE,
breaks = max(condition) / nplots)) %>%
group_by(condition, model) %>%
mutate(time = seq(from = 1, by = 1, length.out = n()),
bound = ind_param$alpha[unique(condition)]) %>%
group_by(graph) %>%
do({
alpha <- select(., bound) %>% unique; print(unlist(alpha)) })
calc_model_paths(paths, cores = cores) %>% melt %>%
rename(state = value, condition = L2, model = L1) %>%
mutate(graph = cut(x = condition, labels = FALSE,
breaks = max(condition) / nplots)) %>%
group_by(condition, model) %>%
mutate(time = seq(from = 1, by = 1, length.out = n()),
bound = ind_param$alpha[unique(condition)]) %>%
group_by(graph) %>%
do({
alpha <- select(., bound) %>% unique %>% unlist %>%
rep(each = nplots / 2); print(alpha) })
calc_model_paths(paths, cores = cores) %>% melt %>%
rename(state = value, condition = L2, model = L1) %>%
mutate(graph = cut(x = condition, labels = FALSE,
breaks = max(condition) / nplots)) %>%
group_by(condition, model) %>%
mutate(time = seq(from = 1, by = 1, length.out = n()),
bound = ind_param$alpha[unique(condition)]) %>%
group_by(graph) %>%
do({
alpha <- select(., bound) %>% unique %>% unlist %>%
rep(each = nplots / 2)
ts.graph <- ggplot(data = .) +
aes(x = time, y = state, group = interaction(condition, model),
color = model) +
facet_wrap(facets = ~condition, nrow = 6, ncol = 4,
scales = "free_x") +
geom_line() + geom_hline(yintercept = c(0, alpha)) +
theme_bw() + ylab("Evidence") + xlab("Time (ms)")
ggsave(ts.graph,
filename = paste0("results/sample_path/path-plot-corr",
unique(.$graph), "-", Sys.Date(),
".pdf"))
})
?geom_hline
file.edit("~/mount/giverny/Masters/src/predictions/sample_path/plots_script.R")
setwd("~/Dropbox/Slava/Masters/")
source("src/predictions/sample_path/plot_mean_paths.R")
paths
settings <- list(cores = 3,
nrow = 6,
ncol = 4,
nplots = 22)
with(data = settings, expr = plot_mean_paths(paths = paths, cores = cores,
nrow = nrow, ncol = ncol,
nplots = nplots))
source("~/mount/giverny/Masters/src/predictions/sample_path/plot_mean_paths.R")
source("~/mount/giverny/Masters/src/predictions/sample_path/plot_mean_paths.R")
file.edit("~/mount/giverny/Masters/src/predictions/sample_path/plot_mean_paths.R")
file.edit("~/mount/giverny/Masters/src/predictions/sample_path/plots_script.R")
file.edit("~/mount/giverny/Masters/src/predictions/sample_path/plots_script.R")
# Specifies simulation settings
settings <- list(models = c("independent", "normal", "t"),
smpl_size = 50,
seeds = c(1316048320, -1572737661, 195896225),
sigma = .1,
time_unit = 1e-3,
cores = 3)
paths <- with(data = settings,
expr = mapply(FUN = simul_paths, model = models, seed = seeds,
MoreArgs = list(smpl_size, sigma, time_unit, cores),
SIMPLIFY = FALSE))
save(paths, file = paste0("results/sample_path/paths2-", Sys.Date(),
".RData"), compress = "gzip")
getwd()
paste0("results/sample_path/plots-computational-time-",
Sys.Date(), ".txt")
alpha
ind_param
add
add(3, 2)
x
x = c(55, 65, 66, 72, 74, 77, 82, 83, 84, 85, 92, 93, 98, 99, 101,
103, 108, 109, 543)
iqr(x)
summary(x)
length(x)
sort(x)
median(sort(x)[1:9])
median(sort(x)[11:19])
101 - 74
file.edit("~/Classes/Stat6950-Sp2015/hw1/hw1_writeup.Rnw")
height <- alr3::Heights
help(package = "alr3")
height <- alr3::heights
str(height)
slr <- with(height, lm(Dheight ~ Mheight))
library(magrittr)
slr <- height %>% lm(Dheight ~ Mheight)
slr <- height %>% lm(Dheight ~ Mheight, data = .)
slr
summary(slr)
geom_histogram
?geom_histogram
melt(height)
help(package = "tidyr")
library(tidyr)
gather(height)
head(gather(height))
head(gather(height, relation, height))
gather(height, relation, height) %>% arrange(height)
head(gather(height, relation, height) %>% arrange(height))
?lm
height <- alr3::heights %>% gather(relation, height)
with(height, lm(Dheight ~ Mheight))
lm(Dheight ~ Mheight, height)
lm(Dheight ~ Mheight, data = height)
group_by(height, relation) %>% lm(Dheight ~ Mheight, data = .)
extract(height, relation)
extract(height, relation, c("D", "M"))
extract(height, relation, c("D"))
spread(height)
spread(height, relation, height)
unite(height)
unite(height, blah)
spread(height, relation)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
height %>% spread(relation, height)
head(height)
height <- alr3::heights %>% gather(relation, tallness)
height %>% spread(relation, tallness)
head(height %>% spread(relation, tallness))
head(height %>% spread(relation, tallness, drop = T))
head(height %>% spread(relation, tallness, convert = F))
head(height %>% spread(relation, tallness, convert = T))
head(height %>% spread(relation, tallness, drop = F))
head(height %>% spread(relation, tallness, drop = T))
x11()
height <- gather(relation, tallness) %>% group_by(relation) %>%
ggplot(height, aes(x = tallness)) + geom_density(alpha = 2)
height <- alr3::heights
x11()
height %>% gather(relation, tallness) %>% group_by(relation) %>%
ggplot(height, aes(x = tallness)) + geom_density(alpha = 2)
height %>% gather(relation, tallness) %>%
ggplot(height, aes(x = tallness, group = relation)) + geom_density(alpha = 2)
height %>% gather(relation, tallness) %>%
ggplot(height, aes(x = tallness), group = relation) + geom_density(alpha = 2)
?geom_density
x11()
height %>% gather(relation, tallness) %>%
ggplot(height, aes(x = tallness, fill = relation)) + geom_density(alpha = 2)
height %>% gather(relation, tallness) %>%
ggplot(aes(x = tallness, fill = relation)) + geom_density(alpha = 2)
height %>% gather(relation, tallness) %>%
ggplot(aes(x = tallness, fill = relation)) + geom_density(alpha = .2)
height %>% gather(relation, tallness) %>%
ggplot(aes(x = tallness, fill = relation)) + geom_density(alpha = .2) + theme_bw()
cov(height)
cor(height)
height %>% gather(relation, tallness) %>%
ggplot(aes(x = tallness, y = tallness, group = relation)) + geom_point()
height %>%
ggplot(aes(x = tallness, y = tallness, group = relation)) + geom_point()
height %>%
ggplot(aes(x = Mheight, y = Dheight, group = relation)) + geom_point()
height %>%
ggplot(aes(x = Mheight, y = Dheight)) + geom_point()
height %>%
ggplot(aes(x = Mheight, y = Dheight)) + geom_point() + stat_smooth()
slr <- height %>% lm(Dheight ~ Mheight, data = .)
summary(slr)
coef(slr)
?lm
(var(height$Dheight) * 1374 - 2.226^2 / (1373)) / var(height$Dheight) * 1374
(var(height$Dheight) * 1374 - 2.226^2 / (1373)) / var(height$Dheight) / 1374
cor(height) ^ 2
(var(height$Dheight) * 1374 - 2.226^2 *(1373)) / var(height$Dheight) / 1374
dim(height)
(var(height$Dheight) * 1374 - 2.226^2 * 1373) / var(height$Dheight) / 1374
?alr
?alr3
help(package = "alr")
help(package = "alr3")
(2.226^2 * 1373) / var(height$Dheight) / 1374
1-(2.226^2 * 1373) / var(height$Dheight) / 1374
head(height)
colmeans(height)
colMeans(height)
20 + .5 * 60
confint(slr, Mheight, 99)
confint(slr, "Mheight", 99)
confint(slr, "Mheight", .99)
slr
dim(height)
2.266 * sqrt(1 / 1375 + mean(height$Mheight)^2 / var(height$Mheight) / 1374) * qt(.995, 1373)
2.266 / var(height$Mheight) / 1374 * qt(.995, 1373)
var(height$Mheight)
2.266 / (var(height$Mheight) * 1374) * qt(.995, 1373)
0.542 - 2.266 / (var(height$Mheight) * 1374) * qt(.995, 1373)
0.542 - 2.266 / sqrt((var(height$Mheight) * 1374)) * qt(.995, 1373)
qt(.995, 1373)
2.266 / sqrt((var(height$Mheight) * 1374))
0.542 - 0.026 * qt(.995, 1373)
0.542 + 0.026 * qt(.995, 1373)
predict(lm, 64)
predict(lm, newdata = data.frame(Mheight = 64))
?predict
predict(slr, newdata = data.frame(Mheight = 64))
20.917 + 0.542 * 64
slr <- lm(Dheight ~ Mheight, data = height)
predict(slr, newdata = data.frame(Mheight = 64))
slr
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = x)
predict(lm(y ~ x), new, se.fit = TRUE)
predict(slr, newdata = height$Mheight)
predict(slr, newdata = height$Mheight)
slr <- lm(Dheight ~ Mheight, data = height)
predict(slr, newdata = height$Mheight)
predict(slr, newdata = as.data.frame(height$Mheight))
predict(slr, newdata = as.data.frame(height$Mheight))
height <- alr3::heights
predict(slr, newdata = as.data.frame(height$Mheight))
predict(slr, newdata = as.data.frame(height$Mheight))
height
height$Mheight
predict(slr, newdata = as.data.frame(height$Mheight))
height$Mheight
predict(slr, newdata = data.frame(Mheight = height$Mheight))
predict(slr)
predict(slr, newdata = data.frame(Mheight = 64))
tail(height$Mheight)
predict(slr, newdata = data.frame(Mheight = 63))
20.917 + 0.542 * 63
predict.lm
slr
29.917 + 0.542 * 63
predict(slr, newdata = data.frame(Mheight = 64))
predict(slr, newdata = data.frame(Mheight = 64))
predict(slr, newdata = data.frame(Mheight = 64), level = .99, interval = "predction")
predict(slr, newdata = data.frame(Mheight = 64), level = .99, interval = "predection")
predict(slr, newdata = data.frame(Mheight = 64), level = .99, interval = "prediction")
predict(slr, newdata = data.frame(Mheight = 64), level = .99, interval = "prediction")["lwr"]
predict(slr, newdata = data.frame(Mheight = 64), level = .99, interval = "prediction")
predict(slr, newdata = data.frame(Mheight = 64), level = .99, interval = "prediction")[2]
predict(slr, newdata = data.frame(Mheight = 64), level = .99, interval = "prediction")[1, "lwr"]
confint(slr, "Dheight")
confint(slr, "Dheight", .99)
confint(slr, "Mheight", .99)
confint(slr, "Mheight", .99)[2]
confint(slr, "Mheight", .99)[1]
?confint
confint(slr, level = .99)
snakes <- alr3::snake
str(snakes)
cov(snakes)
cor(snakes)
colMeans(snakes)
summary(snakes)
hist(snake$X)
hist(snakes$X)
hist(snakes$Y)
?lm
snakes <- alr3::snake %>% rename(content = X, yield = Y)
snakes
slr <- lm(yield ~ 0 + content, snakes)
slr
summary(slr)
dim(snakes)
confint(slr, "content", .99)
confint(slr, "content", .95)
(0.52 - .49) / 0.01318
t(.95, 16)
qt(.95, 16)
coef(slr)
(coef(slr) - .49)
slr$coefficients
slr$effects
slr$model
slr$terms
slr$call
slr$df.residual
slr$qr
slr$rank
slr$residuals
summary(slr)
str(slr)
summary(slr)
(coef(slr) - .49)
(coef(slr) - .49) / 0.01318
coef(slr)
(coef(slr) - .49) / 0.01318
qt(.95, 16)
words <- alr3::MWwords
str(words)
colMeans(words)
colMeans(words, na.rm = T)
words %>% filter(HamiltonRank >= 50)
words %>% filter(HamiltonRank <= 50)
words
alr3::MWwords %>% arrange(HamiltonRank)
words_1 <- alr3::MWwords %>% filter(HamiltonRank <= 50)
words
words_1 <- alr3::MWwords
words_1
dim(words_1)
words_1 <- alr3::MWwords %>% filter(HamiltonRank <= 50)
dim(words_1)
head(words_1)
words_hamilton <- alr3::MWwords %>% filter(HamiltonRank <= 50) %>%
select(HamiltonRank, Hamilton)
x11()
ggplot(words_hamilton, aes(x = HamiltonRank, y = Hamilton)) + geom_points() +
theme_bw()
ggplot(words_hamilton, aes(x = HamiltonRank, y = Hamilton)) + geom_point() +
theme_bw()
ggplot(words_hamilton, aes(x = HamiltonRank, y = Hamilton)) + geom_point() +
theme_bw() + title("Zipf's Law for Ranks 1 - 50")
ggplot(words_hamilton, aes(x = HamiltonRank, y = Hamilton)) + geom_point() +
theme_bw() + ggtitle("Zipf's Law for Ranks 1 - 50")
ggplot(words_hamilton, aes(x = log(HamiltonRank), y = log(Hamilton)) + geom_point() +
theme_bw() + ggtitle("Zipf's Law for Ranks 1 - 50")
ggplot(words_hamilton, aes(x = log(HamiltonRank), y = log(Hamilton))) + geom_point() +
theme_bw() + ggtitle("Zipf's Law for Ranks 1 - 50")
ggplot(words_hamilton, aes(x = log(HamiltonRank), y = Hamilton)) + geom_point() +
theme_bw() + ggtitle("Zipf's Law for Ranks 1 - 50")
ggplot(words_hamilton, aes(x = HamiltonRank, y = log(Hamilton))) + geom_point() + theme_bw() + ggtitle("Zipf's Law for Ranks 1 - 50")
ggplot(words_hamilton, aes(x = log(HamiltonRank), y = log(Hamilton))) + geom_point() + theme_bw() + ggtitle("Zipf's Law for Ranks 1 - 50")
ggplot(words_hamilton) + facet_grid(c(1, 2)) + geom_point(aes(x = HamiltonRank, y = Hamilton)))
facet_grid
?facet_grid
ggplot(words_hamilton) + facet_grid(1 ~ 2) + geom_point(aes(x = HamiltonRank, y = Hamilton))) + theme_bw()
ggplot(words_hamilton) + facet_grid(1 ~ 2) + geom_point(aes(x = HamiltonRank, y = Hamilton))
?facet_wrap
ggplot(words_hamilton) + facet_wrap(nrow = 1, ncol = 2) + geom_point(aes(x = HamiltonRank, y = Hamilton)) + theme_bw()
words_hamilton <- alr3::MWwords %>% filter(HamiltonRank <= 50) %>%
select(HamiltonRank, Hamilton) %>% mutate(logHR = log(HamiltonRank), logH = log(Hamilton))
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
ggplot(words_hamilton) + geom_point(aes(x = HamiltonRank, y = Hamilton)) + theme_bw()
ggplot(words_hamilton) + geom_point(aes(x = logHR, y = logH)) + ggtitle("Zipf's Law for Ranks 1 - 50")
par(mfrow = c(1, 2))
ggplot(words_hamilton) + geom_point(aes(x = HamiltonRank, y = Hamilton)) + theme_bw()
p <- ggplot(words_hamilton) + geom_point(aes(x = HamiltonRank, y = Hamilton)) + theme_bw()
p2 <- ggplot(words_hamilton) + geom_point(aes(x = logHR, y = logH)) + ggtitle("Zipf's Law for Ranks 1 - 50")
print(p)
print(p, p2 = p2)
x11()
ggplot(words_hamilton) + geom_point(aes(x = HamiltonRank, y = Hamilton)) + theme_bw()
slr <- lm(logH ~ logHR, data = words_hamilton)
slr
summary(slr)
words_hamilton <- alr3::MWwords %>% filter(HamiltonRank <= 50) %>%
select(HamiltonRank, Hamilton) %>% mutate(logHR = log(HamiltonRank), logH = log(Hamilton))
ggplot(words_hamilton) + geom_point(aes(x = logHR, y = logH)) + theme_bw() + ggtitle("Zipf's Law for Ranks 1 - 50")
words_hamilton <- alr3::MWwords %>% filter(HamiltonRank <= 50) %>%
select(HamiltonRank, Hamilton) %>% mutate(logHR = log(HamiltonRank), logH = log(Hamilton))
ggplot(words_hamilton) + geom_point(aes(x = logHR, y = logH)) + theme_bw() + ggtitle("Zipf's Law for Ranks 1 - 50")
slr <- lm(logH ~ logHR, data = words_hamilton)
alr3::MWwords
library(magrittr)
library(ggplot2)
library(alr3)
magrittr
help(package = "magrittr")
coef(slr)
coef(slr)[2]
summary(slr)
(coef(slr)[2] + 1) / .01275
t.crit <- qt(.975, 48)
qt(.975, 48)
words_hamilton75 <- alr3::MWwords %>% filter(HamiltonRank <= 75) %>%
select(HamiltonRank, Hamilton) %>% mutate(logHR = log(HamiltonRank), logH = log(Hamilton))
p <- ggplot(words_hamilton75) + geom_point(aes(x = logHR, y = logH)) + theme_bw() + ggtitle("Zipf's Law for Ranks 1 - 75")
print(p)
slr <- lm(logH ~ logHR, data = words_hamilton75)
summary(slr)
words_hamilton100 <- alr3::MWwords %>% filter(HamiltonRank <= 100) %>%
select(HamiltonRank, Hamilton) %>% mutate(logHR = log(HamiltonRank), logH = log(Hamilton))
p <- ggplot(words_hamilton100) + geom_point(aes(x = logHR, y = logH)) + theme_bw() + ggtitle("Zipf's Law for Ranks 1 - 100")
print(p)
slr <- lm(logH ~ logHR, data = words_hamilton100)
summary(slr)
library(ggplot2)
?geom_abline
summary(slr)
summary(slr)
summary(slr75)
words_hamilton75 <- alr3::MWwords %>% filter(HamiltonRank <= 75) %>%
select(HamiltonRank, Hamilton) %>% mutate(logHR = log(HamiltonRank), logH = log(Hamilton))
slr75 <- lm(logH ~ logHR, data = words_hamilton75)
summary(slr75)
words_hamilton100 <- alr3::MWwords %>% filter(HamiltonRank <= 100) %>%
select(HamiltonRank, Hamilton) %>% mutate(logHR = log(HamiltonRank), logH = log(Hamilton))
slr100 <- lm(logH ~ logHR, data = words_hamilton100)
summary(slr100)
gc()
